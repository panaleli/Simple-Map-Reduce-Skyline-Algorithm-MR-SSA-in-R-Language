
# 4th implementation: 8 Columns Dataset 
# Register the paths 

Sys.setenv(HADOOP_HOME="/usr/lib/hadoop-0.20-mapreduce")
Sys.setenv(HADOOP_CMD="/usr/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.7.1.jar")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.35.x86_64")

# Load libraries for map-reduce

library(rmr2)
library(rJava)
library(rhdfs)
hdfs.init()

# Create random dataset with 2000 points

x1 = sample.int(2000, 2000)
y1 = sample.int(2000, 2000)
z1 = sample.int(2000, 2000)

x2 = sample.int(2000, 2000)
y2 = sample.int(2000, 2000)
z2 = sample.int(2000, 2000)

x3 = sample.int(2000, 2000)
y3 = sample.int(2000, 2000)
	
# Choose datasets		

Dataset.4 = data.frame(x1,y1,z1,x2,y2,z2,x3,y3)

# Move Dataset to DFS

Dataset.points <- to.dfs(Dataset.4)

# Start count time

ptm <- proc.time()

# Map-Reduce ordering

data.ordering = from.dfs(
    mapreduce(
        input = Dataset.points, 
        map = function(k, v) keyval(v, 1), 
        
	reduce = 
            function(k, v) 
                keyval(k, order(v))))
# Import data.ordering into a new dataset

Skyline.points <- to.dfs(data.ordering$key)    	  

# Find skylines with Map-Reduce

find.skylines = from.dfs(
    mapreduce(
        input = Skyline.points,
        map = function(k, v)  
            
        {
            nondom <- v[which(!duplicated(cummin(v$y))), ]
            
            keyval(k, nondom )}))

# End count time

proc.time() - ptm

# Appear the skyline results

nondominated <- find.skylines$val
nondominated

# Make 2D plot for x1,y1,z1,x2,y2,z2,x3,y3

plot(Dataset.4[,1:8], xlim=c(0,2000), ylim=c(0,2000))
plot(nondominated[,1:8], xlim=c(0,2000), ylim=c(0,2000))


10.4.5 5th implementation: 10 Columns Dataset 
# Register the paths 

Sys.setenv(HADOOP_HOME="/usr/lib/hadoop-0.20-mapreduce")
Sys.setenv(HADOOP_CMD="/usr/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.7.1.jar")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.35.x86_64")

# Load libraries for Map-Reduce

library(rmr2)
library(rJava)
library(rhdfs)
hdfs.init()





# Create random dataset with 2000 points

x1 = sample.int(2000, 2000)
y1 = sample.int(2000, 2000)
z1 = sample.int(2000, 2000)

x2 = sample.int(2000, 2000)
y2 = sample.int(2000, 2000)
z2 = sample.int(2000, 2000)

x3 = sample.int(2000, 2000)
y3 = sample.int(2000, 2000)
z3 = sample.int(2000, 2000)

x4 = sample.int(2000, 2000)
	
# Choose datasets		

Dataset.5 = data.frame(x1,y1,z1,x2,y2,z2,x3,y3,z3,x4)

# Move Dataset to DFS

Dataset.points <- to.dfs(Dataset.5)

 # Start count time

ptm <- proc.time()

# Map-Reduce ordering

data.ordering = from.dfs(
    mapreduce(
        input = Dataset.points, 
        map = function(k, v) keyval(v, 1), 
        
	reduce = 
            function(k, v) 
                keyval(k, order(v))))

# Import data.ordering into a new dataset

Skyline.points <- to.dfs(data.ordering$key)    	  

# Find skylines with Map-Reduce

find.skylines = from.dfs(
    mapreduce(
        input = Skyline.points,
        map = function(k, v)  
            
        {
            nondom <- v[which(!duplicated(cummin(v$y))), ]
            
            keyval(k, nondom )}))

# End count time

proc.time() - ptm

# Appear the skyline results

nondominated <- find.skylines$val
nondominated

# Make 2D plot for x1,y1,z1,x2,y2,z2,x3,y3,z3,x4

plot(Dataset.5[,1:10], xlim=c(0,2000), ylim=c(0,2000))
plot(nondominated[,1:10], xlim=c(0,2000), ylim=c(0,2000))